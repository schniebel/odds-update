version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    APP_NAME: sparkApp
    ECR_ACCOUNT_ID: "123456789012"
    ECR_REPO_APP: "silver-curation"   # <-- use this consistently
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      docker: 20
    commands:
      - aws --version
      - docker version

  pre_build:
    commands:
      - echo "Login to ECR"
      - aws ecr get-login-password --region "$AWS_DEFAULT_REGION" \
        | docker login --username AWS --password-stdin "${ECR_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"

      # Ensure repo exists (idempotent)
      - |
        aws ecr describe-repositories --repository-names "$ECR_REPO_APP" >/dev/null 2>&1 || \
        aws ecr create-repository --repository-name "$ECR_REPO_APP" >/dev/null

      # Resolve branch & commit
      - COMMIT_SHA="$(echo "${CODEBUILD_RESOLVED_SOURCE_VERSION}" | cut -c1-7 || true)"
      - BRANCH_REF="${CODEBUILD_WEBHOOK_HEAD_REF:-}"
      - |
        if [ -z "$BRANCH_REF" ]; then
          BRANCH_REF="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || true)"
        fi
      - BRANCH_REF="${BRANCH_REF#refs/heads/}"
      - BRANCH_NAME="${BRANCH_REF:-main}"
      - BRANCH_SAFE="$(echo "$BRANCH_NAME" | tr '/_' '-' | sed 's/[^a-zA-Z0-9.\-]/-/g')"

      # Make sure tags are present, then detect exact semver tag (prod)
      - git fetch --tags --force >/dev/null 2>&1 || true
      - GIT_TAG="$(git describe --tags --exact-match 2>/dev/null || true)"

      - APP_TAG_SHA="${COMMIT_SHA:-sha-$(date +%s)}"
      - TS_TAG="$(date +%s)"   # <-- used for test images
      - FULL_ECR="${ECR_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_APP}"

      - |
        echo "Resolved:"
        echo "  branch:   $BRANCH_SAFE"
        echo "  commit:   $APP_TAG_SHA"
        echo "  semver:   ${GIT_TAG:-<none>}"
        echo "  ts(tag):  $TS_TAG"

  build:
    commands:
      - echo "Run tests if present"
      - |
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - |
        if [ -d tests ]; then pytest -q; else echo "No tests directory; skipping"; fi

      - echo "Build image"
      - docker build -t "${APP_NAME}:${APP_TAG_SHA}" .

      - echo "Tag image(s)"
      # Always publish branch+sha and sha for traceability
      - docker tag "${APP_NAME}:${APP_TAG_SHA}" "${FULL_ECR}:${BRANCH_SAFE}-${APP_TAG_SHA}"
      - docker tag "${APP_NAME}:${APP_TAG_SHA}" "${FULL_ECR}:${APP_TAG_SHA}"
      - docker tag "${APP_NAME}:${APP_TAG_SHA}" "${FULL_ECR}:latest"

      # Strategy:
      # - If semver tag present => prod: publish semver tag
      # - Else => test: publish pure Unix timestamp tag
      - |
        if [ -n "$GIT_TAG" ]; then
          echo "Prod build detected (semver tag): $GIT_TAG"
          docker tag "${APP_NAME}:${APP_TAG_SHA}" "${FULL_ECR}:${GIT_TAG}"
        else
          echo "Test build detected: tagging with Unix timestamp ${TS_TAG}"
          docker tag "${APP_NAME}:${APP_TAG_SHA}" "${FULL_ECR}:${TS_TAG}"
          # Optional: also keep a moving branch tag for humans
          docker tag "${APP_NAME}:${APP_TAG_SHA}" "${FULL_ECR}:${BRANCH_SAFE}"
        fi

  post_build:
    commands:
      - echo "Push common tags"
      - docker push "${FULL_ECR}:${BRANCH_SAFE}-${APP_TAG_SHA}"
      - docker push "${FULL_ECR}:${APP_TAG_SHA}"
      - docker push "${FULL_ECR}:latest"
      - |
        if [ -n "$GIT_TAG" ]; then
          docker push "${FULL_ECR}:${GIT_TAG}"
        else
          docker push "${FULL_ECR}:${TS_TAG}"
          docker push "${FULL_ECR}:${BRANCH_SAFE}" || true
        fi
      - |
        echo "Published:"
        echo " - ${FULL_ECR}:${BRANCH_SAFE}-${APP_TAG_SHA}"
        echo " - ${FULL_ECR}:${APP_TAG_SHA}"
        echo " - ${FULL_ECR}:latest"
        if [ -n "$GIT_TAG" ]; then
          echo " - ${FULL_ECR}:${GIT_TAG}"
        else
          echo " - ${FULL_ECR}:${TS_TAG}"
          echo " - ${FULL_ECR}:${BRANCH_SAFE}"
        fi

artifacts:
  files:
    - README.md
  discard-paths: yes
